/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradlelearn;
import java.util.*;


import com.google.gson.JsonParser;
import com.google.gson.JsonObject;

import static spark.Spark.*;


public class App{
	
	static Map<Integer, String> dataStore = new HashMap<>();
    public static void main(String[] args) {
    	
        post("/create", (req, res) -> {
        	String body = req.body();
            JsonObject jsonObject = JsonParser.parseString(body).getAsJsonObject();
            System.out.println(jsonObject);

            // Extract name and age
            String name="";
            int id=0;
            
            try {
            name = jsonObject.get("name").getAsString();
            id = jsonObject.get("id").getAsInt();
            dataStore.put(id, name);
            }catch(Exception e) {
            	return "Please enter some data first";
            }
            System.out.print(name+" "+id);
            return "Received JSON data. Name: " + name + ", Age: " + id;	
        	
        });
        
        
        get("/read", (req, res) -> {
        	JsonObject jsonObject=new JsonObject();

        	 for (Integer key : dataStore.keySet()) {
        		 String s=Integer.toString(key);
        	      jsonObject.addProperty(s,dataStore.get(key));
        	    }
        	 return jsonObject;
        });

        get("/getMyObject", (req, res) -> {
            JsonObject jsonObject = new JsonObject();
            int id = Integer.parseInt(req.queryParams("id"));
            if (dataStore.containsKey(id)) {
                String name = dataStore.get(id);
                jsonObject.addProperty("id", String.valueOf(id));  // Use a string as the property name
                jsonObject.addProperty("name", name);  // Use the actual property name and value
            } else {
                jsonObject.addProperty("message", "Data is not available; first add the data");
                jsonObject.addProperty("success", false);
            }
            return jsonObject;
        });

        put("/update", (req, res) -> {
        	String message="Updated Successfully";
        	JsonObject result=new JsonObject();
        	String body = req.body();
            JsonObject jsonObject = JsonParser.parseString(body).getAsJsonObject();
            
            String updatedname = jsonObject.get("name").getAsString();
            int id = Integer.parseInt(req.queryParams("id"));
            if(dataStore.containsKey(id)) {
            	dataStore.put(id, updatedname);
            	result.addProperty(message, true);
            }else {
            	result.addProperty("Data is not available first add the data ", false);
            }
        
            return result;

        });

        put("/updateObj", (req, res) -> {
            String message = "Updated Successfully";
            JsonObject result = new JsonObject();
            String body = req.body();

            try {
                JsonObject jsonObject = JsonParser.parseString(body).getAsJsonObject();
                if (jsonObject.has("name")) {
                    String updatedName = jsonObject.get("name").getAsString();
                    int id = Integer.parseInt(req.queryParams("id"));

                    if (dataStore.containsKey(id)) {
                        dataStore.put(id, updatedName);
                        result.addProperty(message, true);
                    } else {
                        result.addProperty("message", "Data is not available; first add the data");
                        result.addProperty("success", false);
                    }
                } else {
                    result.addProperty("message", "'name' field is missing in the request body");
                    result.addProperty("success", false);
                }
            } catch (Exception e) {
                result.addProperty("message", "Error processing the request");
                result.addProperty("success", false);
                e.printStackTrace();  // Log the exception for debugging
            }

            return result;
        });
        
        
        delete("/delete", (req, res) -> {
        	String message="Deleted Successfully";
        	JsonObject result=new JsonObject();
          int id = Integer.parseInt(req.queryParams("id"));
          if(dataStore.containsKey(id)) {
        	  dataStore.remove(id);
        	  result.addProperty(message, true);
          }else {
        	  result.addProperty("Data is not available", false);
          }
          
           return result;

        });

        delete("/deleteObject", (req, res) -> {
            String message = "Deleted Successfully";
            JsonObject result = new JsonObject();

            try {
                int id = Integer.parseInt(req.queryParams("id"));
                if (dataStore.containsKey(id)) {
                    dataStore.remove(id);
                    result.addProperty("success", true);
                    result.addProperty("message", message);
                } else {
                    result.addProperty("success", false);
                    result.addProperty("message", "Data with the specified ID is not available");
                }
            } catch (NumberFormatException e) {
                result.addProperty("success", false);
                result.addProperty("message", "Invalid ID format");
            } catch (Exception e) {
                result.addProperty("success", false);
                result.addProperty("message", "Error processing the request");
                e.printStackTrace();  // Log the exception for debugging
            }

            return result;
        });
    } 
}

